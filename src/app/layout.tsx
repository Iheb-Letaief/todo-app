'use client';

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

import '@tabler/core/dist/css/tabler.min.css';
import '@tabler/core/dist/css/tabler-flags.min.css';
import {Providers} from "@/app/providers";
import DarkModeToggle from "@/components/DarkModeToggle";
import TranslationToggle from "@/components/ToggleTranslationButton";
import { useEffect, useState } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const metadata: Metadata = {
  title: "Todo App",
  description: "Generated by create next app",
};

export default function RootLayout({
                                     children,
                                   }: Readonly<{
  children: React.ReactNode;
}>) {
    const [mounted, setMounted] = useState(false);
    const [darkMode, setDarkMode] = useState(false);

    useEffect(() => {
        const storedTheme = localStorage.getItem('theme');
        const isDark = storedTheme
            ? storedTheme === 'dark'
            : window.matchMedia('(prefers-color-scheme: dark)').matches;

        setDarkMode(isDark);
        setMounted(true);
    }, []);


    useEffect(() => {
        import('bootstrap')
            .then(() => {
                require('@tabler/core/dist/js/tabler.min.js');
                require('@tabler/core/dist/css/tabler-flags.min.css');
            });
    }, []);



  return (
      <html lang="en" data-bs-theme={darkMode ? 'dark' : 'light'}>
      <head>
          <meta charSet="utf-8"/>
          <meta name="viewport" content="width=device-width, initial-scale=1"/>
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
      <Providers>
          {mounted && (
              <div className="absolute top-4 right-4 z-50">
                  <div className="space-x-3">
                      <DarkModeToggle darkMode={darkMode} setDarkMode={setDarkMode} />
                      <TranslationToggle/>
                  </div>
              </div>
          )}
          {children}
      </Providers>
      </body>
      </html>
  );
}